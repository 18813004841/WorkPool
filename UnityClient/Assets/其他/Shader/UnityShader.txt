Unity Shader:
	使用 Unity ShaderLab 语言进行编写，基于 CG 和 HLSL，可以使用着色器图形（Shader Graph）进行可视化编辑，可以被用于多种不同的渲染管线中如 Unity 的 Built-in、URP、HDRP等。
1.shader渲染的几个阶段:
	顶点着色器、曲面细分着色器、几何着色器、裁剪、映射、光栅化、片元着色器、输出合并
	1.1.应用阶段：
		输出渲染所需的几何信息，即渲染图元（点、线、三角面等）。
	1.2.几何阶段：
		1.2.1.顶点着色器（Vertex Shader）：
			该阶段负责将游戏对象的顶点位置从局部坐标系转换到屏幕空间坐标系，并执行顶点的其他变换操作。顶点着色器通常输出裁剪空间坐标、法线向量、纹理坐标等信息。
		1.2.2.曲面细分着色器（图元组装）：
			该阶段将顶点着色器输出的顶点按照拓扑结构组装成三角形、线段等基本图元。
		1.2.3.几何着色器（Geometry Shader）：
			该阶段是可选的，它可以在图元组装后进一步处理几何形状，例如创建细分表面、生成粒子等。几何着色器通常输出屏幕空间坐标、法线向量、纹理坐标等信息。
		1.2.4.裁剪（Clipping）：
			该阶段将图元裁剪为在视锥体内的部分，从而排除在视锥体外的部分，提高渲染效率。
		1.2.5.屏幕映射：
			将每个图元的x和y坐标转换到屏幕坐标系下。
	1.3.光栅化阶段：
		该阶段将裁剪后的图元映射到屏幕像素上，并计算每个像素的颜色值。
		分为三角形设置、三角形遍历、片元着色器、逐片元操作
		1.3.1.三角形设置：
			目标：计算每个图元覆盖了哪些像素，以及为这项像素计算他们的颜色。
		1.3.2.三角形遍历：
			得到一个片元序列。
		1.3.3.片元着色器（Pixel Shader）：
			该阶段是渲染管线中的最后一个阶段，用于对每个像素进行着色。片元着色器通常使用纹理、光照等信息计算像素的颜色值，并输出最终的颜色。
		1.3.4.逐片元操作（输出合并阶段DirectX）
			该阶段将片元着色器的输出与其他像素的颜色值进行混合、遮挡等操作，并输出最终的像素颜色值。
2.可用shaderLab编写的着色器
	2.1.表面着色器（Surface Shader）：
		表面着色器是一种高级着色器，它允许使用类似于标准材质的简单语法来创建复杂的材质效果。表面着色器可以与光照系统一起使用，以便产生高质量的渲染效果。
	2.2.顶点/片元着色器（Vertex/Fragment Shader）：
		顶点/片元着色器是一种基础着色器，它们允许直接控制每个顶点和片元的渲染效果。这种着色器需要更多的编程技能，但是它们也提供了更高的自定义性和灵活性。
	2.3.计算着色器（Compute Shader）：
		计算着色器是一种用于在GPU上执行通用计算的着色器。它们可以用于各种用途，例如物理模拟、数据处理和图像处理。
	除了这些常见的着色器类型，Unity ShaderLab还支持其他类型的着色器，如几何着色器（Geometry Shader）和Tessellation着色器（Tessellation Shader），这些着色器可以用于更高级的渲染技术。