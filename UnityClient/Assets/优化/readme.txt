优化:
1.GC垃圾
	1.1.避免频繁创建销毁对象，会造成垃圾收集器的负担。可使用对象池来管理。
	1.2.值类型比引用类型高效
		值类型的值直接存储在内存栈中，copy时直接copy值，存储大小区域固定，内存栈自己处理释放，没有GC开销。但值类型在做数据传递时会调用拷贝操作会产生内存开销。值类型的值是相对独立的。
		引用类型数据存储在内存堆中，大小不固定，在栈中存储的是只想内存堆的引用。引用类型进行赋值时，会将引用拷贝过去，两方的属于数据公用。当引用类型没有被使用时就会被垃圾回收器处理产生GC
	值类型用来处理复杂的共同引用同一数据的地方。值类型处理数据简单的，不被共用的，类似json结构之类的数据
	1.3.少使用string，字符串是引用类型，频繁使用会造成GC垃圾。如果只是做显示用的没有涉及到数据传递和存储的时候可以使用，自定义的stringBuilder来复用。
	1.4.减少使用foreach，foreach会创建迭代器对象，产生GC，使用for循环遍历迭代数据。
	1.5.减少装箱拆箱操作
	1.6.代码优化，这一点最为重要也往往是问题根源所在。
	1.7.使用profiler进行分析
	总结：好的代码习惯，优秀的算法可以减少很多后续优化GC的工作。
2.美术资源优化
	2.1.图片压缩（祥见图片压缩文件夹）
3.数据存储与传输
	1.1 ProtoBuffer 与 FlatBuffer（详见ProtoBuffer_&_FlatBuffer文件夹）
4.Mesh重构
	详见Mesh重构文件夹